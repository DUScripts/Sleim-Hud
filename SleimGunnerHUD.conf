name: SleimGunnerHUD_v1.1
pvp: true

slots:
    core:
        class: CoreUnit
    weapon:
        class: WeaponUnit
        select: manual
    shield:
        class: ShieldGeneratorUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual

handlers:
    unit:
        start:
            lua: |
                showWeapons = true --export: Shows Weapon Widgets in 3rd person
                showShield = true --export: shows Shield Status
                showAllies = true --export: adds info about allies
                showThreats = true --export: adds info about Threats
                printSZContacts = false --export: print new Contacs in Safezone, default off
                printLocationOnContact = true --export: print own location on new target
                maxAllies = 10 --export: max Amount for detailed info about Allies, reduce if overlapping with threat info
                probil = 0
                targetSpeed = 0
                oldSpeed = 0
                targetDistance = 0
                oldTargetDistance = 0
                targetName = "TargetInfo"
                speedChangeIcon = ""
                distanceChangeIcon = ""
                maxCoreStress = core.getMaxCoreStress()
                venting = ""
                stressBarHeight = "5"
                newRadarContacts = {}
                newRadarCounter = 0
                newTargetId = 0
                healthHtml = ""
                alliesHtml = ""
                threatsHtml = ""
                html = ""
                allies = {}
                threats = {}
                if radar_size == 0 then
                    system.print("Connect a space radar and run config again!")
                    unit.exit()
                end
                if weapon_size == 0 then
                    system.print("No Weapons connected")
                    unit.exit()
                end
                local kSkipCharSet = { ["O"] = true, ["Q"] = true, ["0"] = true }
                local kCharSet = {}

                local function addRangeToCharSet(a, b)
                        for i=a,b do
                            local c = string.char(i)
                               if not kSkipCharSet[c] then
                                   kCharSet[#kCharSet+1] = c
                               end
                       end
                end

                -- 0 - 9
                addRangeToCharSet(48, 57)
                -- A - Z
                addRangeToCharSet(65, 90)

                local kCharSetSize = #kCharSet

                local function getHash(x)
                    if x == nil then
                        return 0
                    end
                    x = ((x >> 16) ~ x) * 0x45d9f3b
                    x = ((x >> 16) ~ x) * 0x45d9f3b
                    x = (x >> 16) ~ x
                    if x < 0 then x = ~x end
                    return x
                end

                function getShortName(id)
                    local seed = getHash(id)%8388593
                    local a = (seed*653276)%8388593
                    local b = (a*653276)%8388593
                    local c = (b*653276)%8388593
                    return kCharSet[a%kCharSetSize+1] .. kCharSet[b%kCharSetSize+1] .. kCharSet[c%kCharSetSize+1]
                end
                function WeaponWidgetCreate()
                        if type(weapon) == 'table' and #weapon > 0 then
                            local WeaponPanaelIdList = {}
                            for i = 1, #weapon do
                                if i%2 ~= 0 then
                                table.insert(WeaponPanaelIdList, system.createWidgetPanel(''))
                                end
                                local WeaponWidgetDataId = weapon[i].getDataId()
                                local WeaponWidgetType = weapon[i].getWidgetType()
                                system.addDataToWidget(WeaponWidgetDataId, system.createWidget(WeaponPanaelIdList[#WeaponPanaelIdList], WeaponWidgetType))
                            end
                    end
                end
                if showWeapons == true then 
                   WeaponWidgetCreate()
                end


                panel = system.createWidgetPanel('')
                targetTitelWidget = system.createWidget(panel,"title")
                targetHitChanceWidget = system.createWidget(panel,"gauge")
                widgetValues = system.createWidget(panel, "value")

                targetTitelData = system.createData('{"text": "TargetInfo"}')
                targetHitChanceData = system.createData('{"percentage":"0"}')
                hitChance = system.createData('{"label": "Hit Chance", "value": "0","unit":"%"}')
                speed = system.createData('{"label": "Speed", "value": "0","unit":"km/h"}')
                distance = system.createData('{"label": "Distance", "value": "0","unit":"km"}')

                system.addDataToWidget(targetTitelData,targetTitelWidget)
                system.addDataToWidget(hitChance, widgetValues)
                system.addDataToWidget(targetHitChanceData,targetHitChanceWidget)
                system.addDataToWidget(speed, widgetValues)
                system.addDataToWidget(distance, widgetValues)

                function getFriendlyDetails(id)
                    owner = radar_1.getConstructOwner(id)
                    if owner.organizationId > 0 then
                        return system.getOrganizationName(owner.organizationId)
                    end
                    if owner.playerId > 0 then
                        return system.getPlayerName(owner.playerId)
                    end
                    return ""
                end

                function printNewRadarContacts()
                    if not zone or printSZContacts then
                        local newTargetCounter = 0
                        for k,v in pairs(newRadarContacts) do
                            newTargetCounter  = newTargetCounter +1
                            if newTargetCounter > 10 then
                                system.print("Didnt print all new Contacts to prevent overload!")
                            break end
                            newTargetName = "["..radar_1.getConstructCoreSize(v).."]-"..getShortName(v).."- "..radar_1.getConstructName(v)
                            if radar_1.hasMatchingTransponder(v) == 1 then
                                newTargetName = newTargetName.." - [Ally] Owner: "..getFriendlyDetails(v)
                            end
                            system.print("New Target: "..newTargetName)
                            if printLocationOnContact then
                                system.print(system.getWaypointFromPlayerPos())
                            end
                        end
                        newRadarContacts = {}
                        newRadarCounter = 0
                        
                    end
                    

                end

                function updateTargetInfo()
                    targetId = radar_1.getTargetId()
                    if targetId == 0 then 
                        targetName = "No Target selected"
                        targetDistance = 0
                    end
                        if radar_1.isConstructIdentified(targetId) == 1 then
                            targetDistance = math.floor(radar_1.getConstructDistance(targetId))
                            targetName = "["..radar_1.getConstructCoreSize(targetId).."]-"..getShortName(targetId).."- "..radar_1.getConstructName(targetId)
                           -- system.print(targetName)
                            targetSpeed = math.floor(radar_1.getConstructSpeed(targetId) * 3.6)
                            if targetSpeed > oldSpeed then
                                speedChangeIcon = "↑"
                            elseif targetSpeed < oldSpeed then
                                speedChangeIcon = "↓"
                            else
                                speedChangeIcon = ""
                            end
                        
                            if targetDistance > oldTargetDistance then
                                distanceChangeIcon = "↑"
                            elseif targetDistance < oldTargetDistance then
                                distanceChangeIcon = "↓"
                            else
                                distanceChangeIcon = ""
                            end
                            oldTargetDistance = targetDistance
                            oldSpeed = targetSpeed
                    end
                end

                function updateTargetWidget()
                    
                    probil = math.floor(json.decode(weapon_1.getData()).properties.hitProbability * 100)
                    system.updateData(targetTitelData,'{"text": "'..targetName..'"}')
                    system.updateData(hitChance,'{"label": "Hit Chance", "value": "'..probil..'","unit":"%"}')
                    system.updateData(speed,'{"label": "Speed", "value": "'..speedChangeIcon..targetSpeed..'","unit":"km/h"}')
                    system.updateData(targetHitChanceData,'{"percentage":'..probil..'}')
                    
                    if targetDistance < 1000 then
                        distanceUnit= "m" 
                    elseif targetDistance < 100000 then
                        targetDistance = targetDistance/1000
                        distanceUnit = "km"
                    else
                        targetDistance = targetDistance/200000
                        distanceUnit= "su"
                    end
                    system.updateData(distance,'{"label": "Distance", "value": "'..distanceChangeIcon..""..string.format('%0.2f',targetDistance)..'","unit":"'..distanceUnit..'"}')
                end

                function getMaxCorestress()
                    if maxCoreStress > 1000000 then
                         maxCoreStress = string.format('%0.3f',(maxCoreStress/1000000)).."M"
                    elseif maxCoreStress > 1000 then
                         maxCoreStress = string.format('%0.2f',(maxCoreStress/1000)).."k"    
                    end
                    system.print("Max Core Stress: "..maxCoreStress)
                end

                function drawShield()

                    shieldHp = shield_1.getShieldHitpoints()
                    shieldPercent = shieldHp/shieldMax*100
                    if shieldPercent == 100 then shieldPercent = "100"
                    else
                    shieldPercent = string.format('%0.2f',shieldPercent)
                    end    
                    coreStressPercent = string.format('%0.2f',core.getCoreStressRatio()*100)
                    local shieldHealthBar= [[
                <style>
                .health-bar {
                    position: fixed;
                    width: 13em; 
                    padding: 1vh; 
                    bottom: 5vh;
                    left: 50%;
                    transform: translateX(-50%);
                    text-align: center;
                    background: #142027;
                    opacity: 0.8;
                    color: white;
                    font-family: "Lucida" Grande, sans-serif;
                    font-size: 1.5em;
                    border-radius: 5vh;
                    border: 0.2vh solid;
                    border-color: #098dfe;
                }
                .bar {
                    padding: 5px;
                    border-radius: 5vh;
                    background: #09c3fe;
                    opacity: 0.8;
                    width: ]]..shieldPercent..[[%;
                    height: 40px;
                    position: relative;
                }


                </style>
                <html>
                <div class="health-bar">
                  <div class="bar">]]..venting..shieldPercent..[[%
                    
                  </div>
                </div>
                </html>
                ]]
                local coreStressBar= [[
                <style>
                .stress-health-bar {
                    position: fixed;
                    width: 13em; 
                    padding: 1vh; 
                    bottom:]]..stressBarHeight..[[vh;
                    left: 50%;
                    transform: translateX(-50%);
                    text-align: center;
                    background: #142027;
                    opacity: 0.8;
                    color: white;
                    font-family: "Lucida" Grande, sans-serif;
                    font-size: 1.5em;
                    border-radius: 5vh;
                    border: 0.2vh solid;
                    border-color: #a00000;
                }
                .stress-bar {
                    padding: 5px;
                    border-radius: 5vh;
                    background: #ff0000;
                    opacity: 0.8;  
                    width: ]]..coreStressPercent..[[%;
                    height: 40px;
                    position: relative;
                }


                </style>
                <html>
                <div class="stress-health-bar">
                  <div class="stress-bar">]]..coreStressPercent..[[%
                    
                  </div>
                </div>
                </html>
                ]]
                    if shield_1.isVenting() == 1 then
                        stressBarHeight = "15"
                        venting = "Venting "
                        healthHtml = coreStressBar..shieldHealthBar
                    elseif shield_1.getState() == 0 or shield_1.getShieldHitpoints() == 0 then
                        stressBarHeight = "5"
                        healthHtml = coreStressBar 
                    else
                        stressBarHeight = "5"
                        venting = ""
                        healthHtml = shieldHealthBar
                    end

                end

                function contains(tablelist, val)
                       for i=1,#tablelist do
                          if tablelist[i] == val then 
                             return true
                          end
                       end
                       return false
                    end
                function updateRadar(r,match)
                        allies={}
                        local allyCounter = 1
                        local threatCounter = 1
                        threats={}
                        local data = radar_1.getData()
                         if string.len(data) < 120000 then  
                            local constructList = data:gmatch('({"constructId":".-%b{}.-})') 
                            local list = {}
                            for str in constructList do
                                local id = tonumber(str:match('"constructId":"([%d]*)"'))
                                local tagged = radar_1.hasMatchingTransponder(id) == 0 and true or false
                                if radar_1.hasMatchingTransponder(id)==1 then
                                    allies[allyCounter]=id
                                    allyCounter = allyCounter +1
                                end
                                if radar_1.getThreatFrom(id) ~= "none" then
                                    threats[threatCounter]=id
                                    threatCounter = threatCounter +1
                                end 
                                local ident = radar_1.isConstructIdentified(id) == 1
                                local randomid = getShortName(id)
                                str = string.gsub(str, 'name":"', 'name":"'..randomid..' - ')
                                if CFCS_locked then 
                                    if match and tagged and ident and not contains(tablelist, id) then
                                        list[#list+1] = str
                                    elseif not match and ident and (contains(tablelist, id) or not tagged) then
                                        list[#list+1] = str
                                    end
                                    else
                                        if match and tagged and not contains(tablelist, id) then
                                            list[#list+1] = str
                                        elseif not match and (contains(tablelist, id) or not tagged) then
                                            list[#list+1] = str
                                        end
                                    end
                                end
                            return '{"constructsList":['..table.concat(list,',')..'],'..data:match('"elementId":".+')
                    end
                end
                    tablelist = {}    
                    radarOnlyEnemeies = true
                    fm = 'Enemies'
                    rf = ''
                    FCS_locked = false
                    local _data = updateRadar(radar,radarOnlyEnemeies)
                        
                    local _panel = system.createWidgetPanel("RADAR")
                    local _widget = system.createWidget(_panel, "value")
                    radarFilter = system.createData('{"label":"Filter","'..fm..''..rf..'","unit": ""}') 
                    system.addDataToWidget(radarFilter, _widget)
                    local _widget = system.createWidget(_panel, "radar")
                    radarData = system.createData(_data) 
                    system.addDataToWidget(radarData, _widget)

                    allyAmount = 0
                    function getAlliedInfo()
                        local htmlAllies = ""
                        allyAmount = #allies
                        local tooMany = false
                        if allyAmount > maxAllies then tooMany = true end
                        
                        for i=1, #allies do
                            if i < (maxAllies+1) then
                                local id = allies[i]
                                local allyShipInfo = "["..radar_1.getConstructCoreSize(id).."]-"..getShortName(id).."- "..radar_1.getConstructName(id)
                                local owner = getFriendlyDetails(id)
                                htmlAllies = htmlAllies..[[<tr>
                                    <td>]]..allyShipInfo..[[</td>
                                    <td>]]..owner..[[</td>
                                    </tr>]]
                            end
                        end
                        if tooMany then
                            htmlAllies = htmlAllies..[[<tr>
                                    <td colspan="2">Plus ]]..(allyAmount-maxAllies)..[[ more allies</td>
                                    </tr>]]
                        end
                        return htmlAllies
                    end
                    function alliesHead()
                        if allyAmount == 0 then
                            return ""
                        else
                           local alliesHead =[[<tr>
                          <th style="width:90%">ShipInfo</th>
                          <th style="width:10%">Owner</th>
                        </tr>]]
                           return alliesHead
                        end 
                    end
                    function drawAlliesHtml()
                    alliesHtml = [[
                    <html>
                    <div class="allies">
                    <table class="customTable">
                      <thead>
                        <h2>Targets: ]]..(#radar_1.getConstructIds()-allyAmount)..[[</h2><br>
                        <h2>Allies: ]]..allyAmount..[[</h2><br>]]..alliesHead()..[[</thead>
                      <tbody>]]..getAlliedInfo()..[[</tbody>
                    </table></div>
                    </html>]]
                end
                function drawThreatsHtml()
                    threatsAmount = #threats
                    function threatsHead()
                        if threatsAmount == 0 then
                            return ""
                        else
                           local threatsHead =[[<tr>
                          <th style="width:90%">ShipInfo</th>
                          <th style="width:10%">Threat Lvl</th>
                        </tr>]]
                           return threatsHead
                        end 
                    end
                    function getThreatsInfo()
                        local threatInfo = ""
                        for i=1,threatsAmount do
                            local id = threats[i]
                            local threatDist = radar_1.getConstructDistance(id)
                            
                            if threatDist < 1000 then
                                threatDist = string.format('%0.2f',threatDist).."m"
                            elseif threatDist < 100000 then
                                threatDist = string.format('%0.2f',threatDist/1000).."km"
                            else
                                threatDist = string.format('%0.2f',threatDist/200000).."su"
                            end
                            local threatShipInfo = "["..radar_1.getConstructCoreSize(id).."]-"..getShortName(id).."- "..radar_1.getConstructName(id).." - "..threatDist
                            local threat = radar_1.getThreatFrom(id)
                            local color = "red"
                            if threat == "identified" or threat == "threatened" then
                                color = "orange"
                            elseif threat == "threatened_identified" then
                                color = "red"
                                threat = "Stopped shooting"
                            end
                            threatInfo = threatInfo..[[<tr style=color:]]..color..[[>
                                    <td>]]..threatShipInfo..[[</td>
                                    <td>]]..threat..[[</td>
                                    </tr>]]
                        end
                        return threatInfo
                    end
                    
                    threatsHtml =[[
                    <div class="locked">
                        <table class="customTable">
                            <thead>
                                <h2 style="color:red;text-align:right">Threats: ]]..threatsAmount..[[</h2><br>]]..threatsHead()..[[
                                <tbody>]]..getThreatsInfo()..[[</tbody>
                        </table>
                    </div>]]
                end

                cssAllyLocked =[[<style>
                    .allies {
                      position: fixed;
                      top: 25px;
                      width: 15%;
                      color: white;
                    }
                    .locked {
                        position: fixed;
                        top: 14%;
                        right: 20px;
                        width: 15%;
                        color: red;
                    }
                    table.customTable {
                      border-collapse: collapse;
                      border-width: 2px;
                      background: #142027;
                        opacity: 0.8;
                        font-family: "Lucida" Grande, sans-serif;
                        font-size: 12px;
                        border-radius: 5px;
                        border: 0.2vh solid;
                        border-color: #098dfe
                    }

                    table.customTable td, table.customTable th {
                      border-width: 2px;
                      border-color: #7EA8F8;
                      border-style: solid;
                      border-radius: 5px;
                      padding: 5px;
                    }
                    .h2{
                        font-family: "Lucida" Grande, sans-serif;
                    }

                    </style>]]

                ownShipId = core.getConstructId()
                ownShipName = core.getConstructName()
                own3Letter = getShortName(ownShipId)
                ownInfoHtml = [[
                <style>
                .ownShipInfo{
                    font-family: "Lucida" Grande, sans-serif;
                    position: fixed;
                    bottom: 10px;
                }
                </style>
                <div class="ownShipInfo">
                    <h4>]]..ownShipId.." ["..own3Letter.."] "..ownShipName..[[<h4>
                </div>
                ]]
                if shield_1 and showShield then
                    shieldMax = shield_1.getMaxShieldHitpoints()
                    drawShield()
                end
                if showAllies then
                    drawAlliesHtml()
                end
                function drawHud()
                    html = cssAllyLocked..healthHtml..alliesHtml..threatsHtml..ownInfoHtml
                    system.setScreen(html)
                end
                system.setScreen(html)
                system.showScreen(1)
                unit.setTimer("hud",0.1)
                unit.setTimer("data", 0.2)
                unit.setTimer("radar", 0.4)
                unit.setTimer("clean", 30)
                getMaxCorestress()
                
        tick:
            args: ["hud"]
            lua: |
                if shield_1 and showShield then
                    drawShield()
                end
                if showAllies then
                    drawAlliesHtml()
                end
                if showThreats then
                    drawThreatsHtml()
                end
                drawHud()
        tick:
            args: ["radar"]
            lua: |
                local _data = updateRadar(radar,radarOnlyEnemeies)
                system.updateData(radarFilter, '{"label":"Filter","value":"'..fm..''..rf..'", "unit": ""}')
                system.updateData(radarData, _data)
                zone = json.decode(weapon_1.getData()).properties.outOfZone
                printNewRadarContacts()
        tick:
            args: ["data"]
            lua: |
                updateTargetWidget()
        tick:
            args: ["clean"]
            lua: |
                collectgarbage("collect")
    radar_1:
        enter(id):
            lua: |
                newRadarCounter = newRadarCounter + 1
                newTargetId = id
                newRadarContacts[newRadarCounter] = id
        leave(id):
            lua: |
                if not zone then
                    local leaveTargetName = "["..radar_1.getConstructCoreSize(id).."]-"..getShortName(id).."- "..radar_1.getConstructName(id)
                    system.print("Target left: "..leaveTargetName)
                end
               
    system:
        actionStart:
            args: [groundaltitudedown]
            lua: |
                radarOnlyEnemeies = not radarOnlyEnemeies
                if radarOnlyEnemeies then
                    fm = 'Enemies'
                else
                    fm = 'Friends'
                end